name: Build Brotli module for Nginx

on:
  schedule:
    - cron: '0 2 * * *'

jobs:
  pre_check:
    name: Pre-build checks
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Pre-build checks
        id: checks
        shell: bash
        env:
          NGINX_RELEASE_VERSION: ${{ secrets.NGINX_RELEASE_VERSION }}
        run: |
          echo $NGINX_RELEASE_VERSION

  build:
    name: Build
    strategy:
      max-parallel: 1
      matrix:
        os: ['ubuntu:20.04']
    runs-on: ubuntu-latest
    needs: pre_check
    if: always()
    container: ${{ matrix.os }}
    steps:
      - name: Install prerequisite packages
        shell: bash
        run: |
          apt update && apt-get install -y lsb-release curl jq git openssh-client
      - name: preapre
        shell: bash
        run: |
          curl -sL https://deb.nodesource.com/setup_15.x | bash -
          apt update && apt-get install -y nodejs
      - uses: technote-space/workflow-conclusion-action@v1
      - name: Pull from repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
        if: env.WORKFLOW_CONCLUSION == 'success'
      - name: Get os version
        shell: bash
        id: os_version
        run: |
          distribution=`lsb_release -si | tr '[:upper:]' '[:lower:]'`
          os_version=`lsb_release -sr`
          echo "::set-output name=os_distribution::$distribution-$os_version"
        if: env.WORKFLOW_CONCLUSION == 'success'
      - name: Assign nginx version
        shell: bash
        id: version
        env:
          NGINX_TAGS: ${{ secrets.NGINX_RELEASE_VERSION }}
        run: |
          echo "::set-output name=nginx_version::$NGINX_TAGS"
        if: env.WORKFLOW_CONCLUSION == 'success'
      - name: Build
        shell: bash
        env:
          BUILD_OS_VERSION: ${{ steps.os_version.outputs.os_distribution }}
          BUILD_BASE_DIR: ${{ steps.os_version.outputs.os_distribution }}
        run: |
          echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
          chmod +x build.sh && sh build.sh
        if: env.WORKFLOW_CONCLUSION == 'success'
      - name: Create release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ secrets.USERNAME }}
          EMAIL: ${{ secrets.EMAIL }}
          SSH: ${{ secrets.SSH_KEY }}
        run: |
          mkdir -p /root/.ssh
          eval "$(ssh-agent -s)"
          echo "$SSH" | tr -d '\r' | ssh-add - > /dev/null
          echo "Host *" > /root/.ssh/config
          echo " StrictHostKeyChecking no" >> /root/.ssh/config
          cd ./${{ steps.os_version.outputs.os_distribution }}/build/
          git init
          git config --global user.email "$EMAIL"
          git config --global user.name "$USERNAME"
          git remote add origin git@github.com:${{ github.repository }}
          git checkout -b build-${{ steps.version.outputs.nginx_version }}-${{ steps.os_version.outputs.os_distribution }}
          git add --all
          git commit -m 'Brotli Module for nginx v${{ steps.version.outputs.nginx_version }} (${{ steps.os_version.outputs.os_distribution }})'
          git push origin build-${{ steps.version.outputs.nginx_version }}-${{ steps.os_version.outputs.os_distribution }}
          git tag -am "Brotli module built for nginx v${{ steps.version.outputs.nginx_version }} (${{ steps.os_version.outputs.os_distribution }})" ${{ steps.version.outputs.nginx_version }}-${{ steps.os_version.outputs.os_distribution }} && git push origin ${{ steps.version.outputs.nginx_version }}-${{ steps.os_version.outputs.os_distribution }}
          git push origin --delete build-${{ steps.version.outputs.nginx_version }}-${{ steps.os_version.outputs.os_distribution }}
        if: env.WORKFLOW_CONCLUSION == 'success'
  
